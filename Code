#include <iostream>

// Definition for a singly-linked list.
struct ListNode {
  int val;
  ListNode *next;
  ListNode(int x) : val(x), next(nullptr) {}
};

class LinkedList {
 public:
  ListNode* head;
  LinkedList() : head(nullptr) {}

  // Insert a new node at the front of the list.
  void add_front(int x) {
    ListNode* new_node = new ListNode(x);
    new_node->next = head;
    head = new_node;
  }

  // Insert a new node at the end of the list.
  void add_end(int x) {
    if (head == nullptr) {
      head = new ListNode(x);
      return;
    }

    ListNode* curr = head;
    while (curr->next != nullptr) {
      curr = curr->next;
    }

    curr->next = new ListNode(x);
  }

  // Remove the first node with the given value.
  void remove(int x) {
    ListNode* curr = head;
    ListNode* prev = nullptr;
    while (curr != nullptr && curr->val != x) {
      prev = curr;
      curr = curr->next;
    }

    if (curr == nullptr) {
      // Value not found.
      return;
    }

    if (prev == nullptr) {
      // Value is in the head node.
      head = curr->next
